/*
 * Copyright (C) 2016 necropotame (necropotame@gmail.com)
 * 
 * This file is part of TeeUniverse.
 * 
 * TeeUniverse is free software: you can redistribute it and/or  modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * TeeUniverse is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with TeeUniverse.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * THIS FILE HAS BEEN GENERATED BY A SCRIPT.
 * DO NOT EDIT MANUALLY!
 *
 * Please use the script "scripts/assets/assets.py" to regenerate it.
 *
 * Why this file is generated by a script?
 * Because there is more than 10 files that follow the same format.
 * In addition, each time a new member is added, enums, getter, setters,
 * copy/transfert functions and storage structure must be updated.
 * It's too much to avoid mistakes.
 */

#ifndef __CLIENT_ASSETS_MAPZONEOBJECTS__
#define __CLIENT_ASSETS_MAPZONEOBJECTS__

#include <shared/assets/asset.h>
#include <cassert>
#include <shared/tl/algorithm.h>
#include <shared/assets/assetpath.h>
#include <vector>
#include <shared/geometry/bezier.h>

class CAsset_MapZoneObjects : public CAsset
{
public:
	enum EFillType
	{
		FILLTYPE_NONE = 0,
		FILLTYPE_INSIDE,
		FILLTYPE_OUTSIDE,
	};
	enum EPathType
	{
		PATHTYPE_OPEN = 0,
		PATHTYPE_CLOSED,
		PATHTYPE_INFINITE,
	};
	
	static const int TypeId = 30;
	
	enum
	{
		TYPE_OBJECT_VERTEX,
		TYPE_OBJECT,
	};
	
	static inline CSubPath SubPath_ObjectVertex(int Id0, int Id1) { return CSubPath(TYPE_OBJECT_VERTEX, Id0, Id1, 0); }
	static inline CSubPath SubPath_Object(int Id0) { return CSubPath(TYPE_OBJECT, Id0, 0, 0); }
	
	enum
	{
		NAME = CAsset::NAME,
		PARENTPATH,
		ZONETYPEPATH,
		OBJECT_ARRAYSIZE,
		OBJECT_PTR,
		OBJECT_ARRAY,
		OBJECT_POSITION,
		OBJECT_POSITION_X,
		OBJECT_POSITION_Y,
		OBJECT_SIZE,
		OBJECT_SIZE_X,
		OBJECT_SIZE_Y,
		OBJECT_ANGLE,
		OBJECT_VERTEX_ARRAYSIZE,
		OBJECT_VERTEX_PTR,
		OBJECT_VERTEX_ARRAY,
		OBJECT_VERTEX,
		OBJECT_VERTEX_POSITION,
		OBJECT_VERTEX_POSITION_X,
		OBJECT_VERTEX_POSITION_Y,
		OBJECT_VERTEX_SMOOTHNESS,
		OBJECT_VERTEX_CONTROLPOINT0,
		OBJECT_VERTEX_CONTROLPOINT0_X,
		OBJECT_VERTEX_CONTROLPOINT0_Y,
		OBJECT_VERTEX_CONTROLPOINT1,
		OBJECT_VERTEX_CONTROLPOINT1_X,
		OBJECT_VERTEX_CONTROLPOINT1_Y,
		OBJECT_VERTEX_WEIGHT,
		OBJECT_PATHTYPE,
		OBJECT_FILLTYPE,
		OBJECT_ZONEINDEX,
		OBJECT_ZONEFLAGS,
		OBJECT_ANIMATIONPATH,
		OBJECT_ANIMATIONOFFSET,
		OBJECT_ZONEDATA1,
		OBJECT_ZONEDATA2,
		OBJECT,
		VISIBILITY,
	};
	
	class CIteratorObject
	{
	protected:
		int m_Index;
		bool m_Reverse;
	public:
		CIteratorObject() : m_Index(0), m_Reverse(false) {}
		CIteratorObject(int Index, bool Reverse) : m_Index(Index), m_Reverse(Reverse) {}
		CIteratorObject& operator++() { if(m_Reverse) m_Index--; else m_Index++; return *this; }
		CSubPath operator*() { return SubPath_Object(m_Index); }
		bool operator==(const CIteratorObject& Iter2) { return Iter2.m_Index == m_Index; }
		bool operator!=(const CIteratorObject& Iter2) { return Iter2.m_Index != m_Index; }
	};
	
	CIteratorObject BeginObject() const { return CIteratorObject(0, false); }
	CIteratorObject EndObject() const { return CIteratorObject(m_Object.size(), false); }
	CIteratorObject ReverseBeginObject() const { return CIteratorObject(m_Object.size()-1, true); }
	CIteratorObject ReverseEndObject() const { return CIteratorObject(-1, true); }
	
	class CVertex
	{
	public:
		class CTuaType_0_2_0
		{
		public:
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_MapZoneObjects::CVertex& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects::CVertex& SysType, CTuaType_0_2_0& TuaType);
		};
		
		class CTuaType_0_2_1
		{
		public:
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_MapZoneObjects::CVertex& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects::CVertex& SysType, CTuaType_0_2_1& TuaType);
		};
		
		class CTuaType_0_2_2
		{
		public:
			CTuaVec2 m_Position;
			tua_int32 m_Smoothness;
			CTuaVec2 m_ControlPoint0;
			CTuaVec2 m_ControlPoint1;
			tua_float m_Weight;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_MapZoneObjects::CVertex& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects::CVertex& SysType, CTuaType_0_2_2& TuaType);
		};
		
		class CTuaType_0_2_3
		{
		public:
			CTuaVec2 m_Position;
			tua_int32 m_Smoothness;
			CTuaVec2 m_ControlPoint0;
			CTuaVec2 m_ControlPoint1;
			tua_float m_Weight;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_MapZoneObjects::CVertex& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects::CVertex& SysType, CTuaType_0_2_3& TuaType);
		};
		
		class CTuaType_0_2_4
		{
		public:
			CTuaVec2 m_Position;
			tua_int32 m_Smoothness;
			CTuaVec2 m_ControlPoint0;
			CTuaVec2 m_ControlPoint1;
			tua_float m_Weight;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_MapZoneObjects::CVertex& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects::CVertex& SysType, CTuaType_0_2_4& TuaType);
		};
		
		class CTuaType_0_3_0
		{
		public:
			CTuaVec2 m_Position;
			tua_int32 m_Smoothness;
			CTuaVec2 m_ControlPoint0;
			CTuaVec2 m_ControlPoint1;
			tua_float m_Weight;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_MapZoneObjects::CVertex& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects::CVertex& SysType, CTuaType_0_3_0& TuaType);
		};
		
		class CTuaType_0_3_3
		{
		public:
			CTuaVec2 m_Position;
			tua_int32 m_Smoothness;
			CTuaVec2 m_ControlPoint0;
			CTuaVec2 m_ControlPoint1;
			tua_float m_Weight;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_3& TuaType, CAsset_MapZoneObjects::CVertex& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects::CVertex& SysType, CTuaType_0_3_3& TuaType);
		};
		
	
	private:
		vec2 m_Position{};
		int m_Smoothness{};
		vec2 m_ControlPoint0{};
		vec2 m_ControlPoint1{};
		float m_Weight{};
	
	public:
		CVertex();
		vec2 GetPosition() const { return m_Position; }
		
		float GetPositionX() const { return m_Position.x; }
		
		float GetPositionY() const { return m_Position.y; }
		
		int GetSmoothness() const { return m_Smoothness; }
		
		vec2 GetControlPoint0() const { return m_ControlPoint0; }
		
		float GetControlPoint0X() const { return m_ControlPoint0.x; }
		
		float GetControlPoint0Y() const { return m_ControlPoint0.y; }
		
		vec2 GetControlPoint1() const { return m_ControlPoint1; }
		
		float GetControlPoint1X() const { return m_ControlPoint1.x; }
		
		float GetControlPoint1Y() const { return m_ControlPoint1.y; }
		
		float GetWeight() const { return m_Weight; }
		
		void SetPosition(vec2 Value) { m_Position = Value; }
		
		void SetPositionX(float Value) { m_Position.x = Value; }
		
		void SetPositionY(float Value) { m_Position.y = Value; }
		
		void SetSmoothness(int Value) { m_Smoothness = Value; }
		
		void SetControlPoint0(vec2 Value) { m_ControlPoint0 = Value; }
		
		void SetControlPoint0X(float Value) { m_ControlPoint0.x = Value; }
		
		void SetControlPoint0Y(float Value) { m_ControlPoint0.y = Value; }
		
		void SetControlPoint1(vec2 Value) { m_ControlPoint1 = Value; }
		
		void SetControlPoint1X(float Value) { m_ControlPoint1.x = Value; }
		
		void SetControlPoint1Y(float Value) { m_ControlPoint1.y = Value; }
		
		void SetWeight(float Value) { m_Weight = Value; }
		
		void AssetPathOperation(const CAssetPath::COperation& Operation)
		{
		}
		
	};
	class CObject
	{
	public:
		class CTuaType_0_2_0
		{
		public:
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_MapZoneObjects::CObject& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects::CObject& SysType, CTuaType_0_2_0& TuaType);
		};
		
		class CTuaType_0_2_1
		{
		public:
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_MapZoneObjects::CObject& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects::CObject& SysType, CTuaType_0_2_1& TuaType);
		};
		
		class CTuaType_0_2_2
		{
		public:
			CTuaVec2 m_Position;
			CTuaVec2 m_Size;
			tua_float m_Angle;
			CTuaArray m_Vertex;
			tua_int32 m_PathType;
			tua_int32 m_FillType;
			tua_uint8 m_ZoneIndex;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_MapZoneObjects::CObject& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects::CObject& SysType, CTuaType_0_2_2& TuaType);
		};
		
		class CTuaType_0_2_3
		{
		public:
			CTuaVec2 m_Position;
			CTuaVec2 m_Size;
			tua_float m_Angle;
			CTuaArray m_Vertex;
			tua_int32 m_PathType;
			tua_int32 m_FillType;
			tua_uint8 m_ZoneIndex;
			tua_uint32 m_ZoneFlags;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_MapZoneObjects::CObject& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects::CObject& SysType, CTuaType_0_2_3& TuaType);
		};
		
		class CTuaType_0_2_4
		{
		public:
			CTuaVec2 m_Position;
			CTuaVec2 m_Size;
			tua_float m_Angle;
			CTuaArray m_Vertex;
			tua_int32 m_PathType;
			tua_int32 m_FillType;
			tua_uint8 m_ZoneIndex;
			tua_uint32 m_ZoneFlags;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_MapZoneObjects::CObject& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects::CObject& SysType, CTuaType_0_2_4& TuaType);
		};
		
		class CTuaType_0_3_0
		{
		public:
			CTuaVec2 m_Position;
			CTuaVec2 m_Size;
			tua_float m_Angle;
			CTuaArray m_Vertex;
			tua_int32 m_PathType;
			tua_int32 m_FillType;
			tua_uint8 m_ZoneIndex;
			tua_uint32 m_ZoneFlags;
			CAssetPath::CTuaType m_AnimationPath;
			tua_int64 m_AnimationOffset;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_MapZoneObjects::CObject& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects::CObject& SysType, CTuaType_0_3_0& TuaType);
		};
		
		class CTuaType_0_3_3
		{
		public:
			CTuaVec2 m_Position;
			CTuaVec2 m_Size;
			tua_float m_Angle;
			CTuaArray m_Vertex;
			tua_int32 m_PathType;
			tua_int32 m_FillType;
			tua_uint8 m_ZoneIndex;
			tua_uint32 m_ZoneFlags;
			CAssetPath::CTuaType m_AnimationPath;
			tua_int64 m_AnimationOffset;
			tua_int32 m_ZoneData1;
			tua_int32 m_ZoneData2;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_3& TuaType, CAsset_MapZoneObjects::CObject& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects::CObject& SysType, CTuaType_0_3_3& TuaType);
		};
		
	
	private:
		vec2 m_Position{};
		vec2 m_Size{};
		float m_Angle{};
		std::vector<CVertex> m_Vertex{};
		int m_PathType{};
		int m_FillType{};
		uint8_t m_ZoneIndex{};
		uint32_t m_ZoneFlags{};
		CAssetPath m_AnimationPath{};
		int64_t m_AnimationOffset{};
		int m_ZoneData1{};
		int m_ZoneData2{};
	
	public:
		void GetTransform(CAssetsManager* pAssetsManager, float Time, matrix2x2* pMatrix, vec2* pPosition) const;
		void GetDrawState(CAssetsManager* pAssetsManager, float Time, vec4* pColor, int* pState) const;
		CObject();
		vec2 GetPosition() const { return m_Position; }
		
		float GetPositionX() const { return m_Position.x; }
		
		float GetPositionY() const { return m_Position.y; }
		
		vec2 GetSize() const { return m_Size; }
		
		float GetSizeX() const { return m_Size.x; }
		
		float GetSizeY() const { return m_Size.y; }
		
		float GetAngle() const { return m_Angle; }
		
		int GetVertexArraySize() const { return m_Vertex.size(); }
		
		const CAsset_MapZoneObjects::CVertex* GetVertexPtr() const { return &(m_Vertex.front()); }
		
		const std::vector<CVertex>& GetVertexArray() const { return m_Vertex; }
		std::vector<CVertex>& GetVertexArray() { return m_Vertex; }
		
		const CAsset_MapZoneObjects::CVertex& GetVertex(const CSubPath& SubPath) const
		{
			assert(SubPath.GetId() < m_Vertex.size());
			{
				return m_Vertex[SubPath.GetId()];
			}
		}
		
		vec2 GetVertexPosition(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Vertex.size())
				return m_Vertex[SubPath.GetId()].GetPosition();
			else return 0.0f;
		}
		
		float GetVertexPositionX(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Vertex.size())
				return m_Vertex[SubPath.GetId()].GetPositionX();
			else return 0.0f;
		}
		
		float GetVertexPositionY(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Vertex.size())
				return m_Vertex[SubPath.GetId()].GetPositionY();
			else return 0.0f;
		}
		
		int GetVertexSmoothness(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Vertex.size())
				return m_Vertex[SubPath.GetId()].GetSmoothness();
			else return 0;
		}
		
		vec2 GetVertexControlPoint0(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Vertex.size())
				return m_Vertex[SubPath.GetId()].GetControlPoint0();
			else return 0.0f;
		}
		
		float GetVertexControlPoint0X(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Vertex.size())
				return m_Vertex[SubPath.GetId()].GetControlPoint0X();
			else return 0.0f;
		}
		
		float GetVertexControlPoint0Y(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Vertex.size())
				return m_Vertex[SubPath.GetId()].GetControlPoint0Y();
			else return 0.0f;
		}
		
		vec2 GetVertexControlPoint1(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Vertex.size())
				return m_Vertex[SubPath.GetId()].GetControlPoint1();
			else return 0.0f;
		}
		
		float GetVertexControlPoint1X(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Vertex.size())
				return m_Vertex[SubPath.GetId()].GetControlPoint1X();
			else return 0.0f;
		}
		
		float GetVertexControlPoint1Y(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Vertex.size())
				return m_Vertex[SubPath.GetId()].GetControlPoint1Y();
			else return 0.0f;
		}
		
		float GetVertexWeight(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Vertex.size())
				return m_Vertex[SubPath.GetId()].GetWeight();
			else return 0.0f;
		}
		
		int GetPathType() const { return m_PathType; }
		
		int GetFillType() const { return m_FillType; }
		
		uint8_t GetZoneIndex() const { return m_ZoneIndex; }
		
		uint32_t GetZoneFlags() const { return m_ZoneFlags; }
		
		CAssetPath GetAnimationPath() const { return m_AnimationPath; }
		
		int64_t GetAnimationOffset() const { return m_AnimationOffset; }
		
		int GetZoneData1() const { return m_ZoneData1; }
		
		int GetZoneData2() const { return m_ZoneData2; }
		
		void SetPosition(vec2 Value) { m_Position = Value; }
		
		void SetPositionX(float Value) { m_Position.x = Value; }
		
		void SetPositionY(float Value) { m_Position.y = Value; }
		
		void SetSize(vec2 Value) { m_Size = Value; }
		
		void SetSizeX(float Value) { m_Size.x = Value; }
		
		void SetSizeY(float Value) { m_Size.y = Value; }
		
		void SetAngle(float Value) { m_Angle = Value; }
		
		void SetVertexArraySize(int Value) { m_Vertex.resize(Value); }
		
		void SetVertex(const CSubPath& SubPath, const CAsset_MapZoneObjects::CVertex& Value)
		{
			if(SubPath.GetId() < m_Vertex.size())
			{
				m_Vertex[SubPath.GetId()] = Value;
			}
		}
		
		void SetVertexPosition(const CSubPath& SubPath, vec2 Value)
		{
			if(SubPath.GetId() < m_Vertex.size())
				m_Vertex[SubPath.GetId()].SetPosition(Value);
		}
		
		void SetVertexPositionX(const CSubPath& SubPath, float Value)
		{
			if(SubPath.GetId() < m_Vertex.size())
				m_Vertex[SubPath.GetId()].SetPositionX(Value);
		}
		
		void SetVertexPositionY(const CSubPath& SubPath, float Value)
		{
			if(SubPath.GetId() < m_Vertex.size())
				m_Vertex[SubPath.GetId()].SetPositionY(Value);
		}
		
		void SetVertexSmoothness(const CSubPath& SubPath, int Value)
		{
			if(SubPath.GetId() < m_Vertex.size())
				m_Vertex[SubPath.GetId()].SetSmoothness(Value);
		}
		
		void SetVertexControlPoint0(const CSubPath& SubPath, vec2 Value)
		{
			if(SubPath.GetId() < m_Vertex.size())
				m_Vertex[SubPath.GetId()].SetControlPoint0(Value);
		}
		
		void SetVertexControlPoint0X(const CSubPath& SubPath, float Value)
		{
			if(SubPath.GetId() < m_Vertex.size())
				m_Vertex[SubPath.GetId()].SetControlPoint0X(Value);
		}
		
		void SetVertexControlPoint0Y(const CSubPath& SubPath, float Value)
		{
			if(SubPath.GetId() < m_Vertex.size())
				m_Vertex[SubPath.GetId()].SetControlPoint0Y(Value);
		}
		
		void SetVertexControlPoint1(const CSubPath& SubPath, vec2 Value)
		{
			if(SubPath.GetId() < m_Vertex.size())
				m_Vertex[SubPath.GetId()].SetControlPoint1(Value);
		}
		
		void SetVertexControlPoint1X(const CSubPath& SubPath, float Value)
		{
			if(SubPath.GetId() < m_Vertex.size())
				m_Vertex[SubPath.GetId()].SetControlPoint1X(Value);
		}
		
		void SetVertexControlPoint1Y(const CSubPath& SubPath, float Value)
		{
			if(SubPath.GetId() < m_Vertex.size())
				m_Vertex[SubPath.GetId()].SetControlPoint1Y(Value);
		}
		
		void SetVertexWeight(const CSubPath& SubPath, float Value)
		{
			if(SubPath.GetId() < m_Vertex.size())
				m_Vertex[SubPath.GetId()].SetWeight(Value);
		}
		
		void SetPathType(int Value) { m_PathType = Value; }
		
		void SetFillType(int Value) { m_FillType = Value; }
		
		void SetZoneIndex(uint8_t Value) { m_ZoneIndex = Value; }
		
		void SetZoneFlags(uint32_t Value) { m_ZoneFlags = Value; }
		
		void SetAnimationPath(const CAssetPath& Value) { m_AnimationPath = Value; }
		
		void SetAnimationOffset(int64_t Value) { m_AnimationOffset = Value; }
		
		void SetZoneData1(int Value) { m_ZoneData1 = Value; }
		
		void SetZoneData2(int Value) { m_ZoneData2 = Value; }
		
		int AddVertex()
		{
			int Id = m_Vertex.size();
			m_Vertex.emplace_back();
			return Id;
		}
		
		void AddAtVertex(int Index) { m_Vertex.insert(m_Vertex.begin() + Index, CAsset_MapZoneObjects::CVertex()); }
		
		void DeleteVertex(const CSubPath& SubPath) { m_Vertex.erase(m_Vertex.begin() + SubPath.GetId()); }
		
		void RelMoveVertex(CSubPath& SubPath, int RelMove)
		{
			int NewId = relative_move(m_Vertex, SubPath.GetId(), RelMove);
			SubPath.SetId(NewId);
		}
		
		bool IsValidVertex(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_Vertex.size()); }
		
		void AssetPathOperation(const CAssetPath::COperation& Operation)
		{
			for(unsigned int i=0; i<m_Vertex.size(); i++)
			{
				m_Vertex[i].AssetPathOperation(Operation);
			}
			Operation.Apply(m_AnimationPath);
		}
		
	};
	class CTuaType_0_2_0 : public CAsset::CTuaType_0_2_0
	{
	public:
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_MapZoneObjects& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects& SysType, CTuaType_0_2_0& TuaType);
	};
	
	class CTuaType_0_2_1 : public CAsset::CTuaType_0_2_1
	{
	public:
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_MapZoneObjects& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects& SysType, CTuaType_0_2_1& TuaType);
	};
	
	class CTuaType_0_2_2 : public CAsset::CTuaType_0_2_2
	{
	public:
		CAssetPath::CTuaType m_ParentPath;
		CAssetPath::CTuaType m_ZoneTypePath;
		CTuaArray m_Object;
		tua_uint8 m_Visibility;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_MapZoneObjects& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects& SysType, CTuaType_0_2_2& TuaType);
	};
	
	class CTuaType_0_2_3 : public CAsset::CTuaType_0_2_3
	{
	public:
		CAssetPath::CTuaType m_ParentPath;
		CAssetPath::CTuaType m_ZoneTypePath;
		CTuaArray m_Object;
		tua_uint8 m_Visibility;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_MapZoneObjects& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects& SysType, CTuaType_0_2_3& TuaType);
	};
	
	class CTuaType_0_2_4 : public CAsset::CTuaType_0_2_4
	{
	public:
		CAssetPath::CTuaType m_ParentPath;
		CAssetPath::CTuaType m_ZoneTypePath;
		CTuaArray m_Object;
		tua_uint8 m_Visibility;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_MapZoneObjects& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects& SysType, CTuaType_0_2_4& TuaType);
	};
	
	class CTuaType_0_3_0 : public CAsset::CTuaType_0_3_0
	{
	public:
		CAssetPath::CTuaType m_ParentPath;
		CAssetPath::CTuaType m_ZoneTypePath;
		CTuaArray m_Object;
		tua_uint8 m_Visibility;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_MapZoneObjects& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects& SysType, CTuaType_0_3_0& TuaType);
	};
	
	class CTuaType_0_3_3 : public CAsset::CTuaType_0_3_3
	{
	public:
		CAssetPath::CTuaType m_ParentPath;
		CAssetPath::CTuaType m_ZoneTypePath;
		CTuaArray m_Object;
		tua_uint8 m_Visibility;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_3& TuaType, CAsset_MapZoneObjects& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapZoneObjects& SysType, CTuaType_0_3_3& TuaType);
	};
	

private:
	CAssetPath m_ParentPath{};
	CAssetPath m_ZoneTypePath{};
	std::vector<CAsset_MapZoneObjects::CObject> m_Object{};
	bool m_Visibility{};

public:
	void GetObjectTransform(const CSubPath& SubPath, float Time, matrix2x2* pMatrix, vec2* pPosition) const;
	void GetObjectDrawState(const CSubPath& SubPath, float Time, vec4* pColor, int* pState) const;
	virtual ~CAsset_MapZoneObjects() {}
	
	template<typename T>
	T GetValue(int ValueType, const CSubPath& SubPath, T DefaultValue) const
	{
		return CAsset::GetValue<T>(ValueType, SubPath, DefaultValue);
	}
	
	template<typename T>
	bool SetValue(int ValueType, const CSubPath& SubPath, T Value)
	{
		return CAsset::SetValue<T>(ValueType, SubPath, Value);
	}
	
	int AddSubItem(int Type, const CSubPath& SubPath);
	
	int AddSubItemAt(int Type, const CSubPath& SubPath, int Index);
	
	void DeleteSubItem(const CSubPath& SubPath);
	
	void RelMoveSubItem(CSubPath& SubPath, int RelMove);
	
	CAsset_MapZoneObjects();
	CAssetPath GetParentPath() const { return m_ParentPath; }
	
	CAssetPath GetZoneTypePath() const { return m_ZoneTypePath; }
	
	int GetObjectArraySize() const { return m_Object.size(); }
	
	const CAsset_MapZoneObjects::CObject* GetObjectPtr() const { return &(m_Object.front()); }
	
	const std::vector<CAsset_MapZoneObjects::CObject>& GetObjectArray() const { return m_Object; }
	std::vector<CAsset_MapZoneObjects::CObject>& GetObjectArray() { return m_Object; }
	
	const CAsset_MapZoneObjects::CObject& GetObject(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_Object.size());
		{
			return m_Object[SubPath.GetId()];
		}
	}
	
	vec2 GetObjectPosition(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetPosition();
		else return 0.0f;
	}
	
	float GetObjectPositionX(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetPositionX();
		else return 0.0f;
	}
	
	float GetObjectPositionY(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetPositionY();
		else return 0.0f;
	}
	
	vec2 GetObjectSize(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetSize();
		else return 0.0f;
	}
	
	float GetObjectSizeX(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetSizeX();
		else return 0.0f;
	}
	
	float GetObjectSizeY(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetSizeY();
		else return 0.0f;
	}
	
	float GetObjectAngle(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetAngle();
		else return 0.0f;
	}
	
	int GetObjectVertexArraySize(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetVertexArraySize();
		else return 0;
	}
	
	const CAsset_MapZoneObjects::CVertex* GetObjectVertexPtr(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetVertexPtr();
		else return NULL;
	}
	
	const std::vector<CVertex>& GetObjectVertexArray(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_Object.size());
		return m_Object[SubPath.GetId()].GetVertexArray();
	}
	std::vector<CVertex>& GetObjectVertexArray(const CSubPath& SubPath)
	{
		assert(SubPath.GetId() < m_Object.size());
		return m_Object[SubPath.GetId()].GetVertexArray();
	}
	
	const CAsset_MapZoneObjects::CVertex& GetObjectVertex(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_Object.size());
		return m_Object[SubPath.GetId()].GetVertex(SubPath.PopId());
	}
	
	vec2 GetObjectVertexPosition(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetVertexPosition(SubPath.PopId());
		else return 0.0f;
	}
	
	float GetObjectVertexPositionX(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetVertexPositionX(SubPath.PopId());
		else return 0.0f;
	}
	
	float GetObjectVertexPositionY(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetVertexPositionY(SubPath.PopId());
		else return 0.0f;
	}
	
	int GetObjectVertexSmoothness(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetVertexSmoothness(SubPath.PopId());
		else return 0;
	}
	
	vec2 GetObjectVertexControlPoint0(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetVertexControlPoint0(SubPath.PopId());
		else return 0.0f;
	}
	
	float GetObjectVertexControlPoint0X(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetVertexControlPoint0X(SubPath.PopId());
		else return 0.0f;
	}
	
	float GetObjectVertexControlPoint0Y(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetVertexControlPoint0Y(SubPath.PopId());
		else return 0.0f;
	}
	
	vec2 GetObjectVertexControlPoint1(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetVertexControlPoint1(SubPath.PopId());
		else return 0.0f;
	}
	
	float GetObjectVertexControlPoint1X(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetVertexControlPoint1X(SubPath.PopId());
		else return 0.0f;
	}
	
	float GetObjectVertexControlPoint1Y(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetVertexControlPoint1Y(SubPath.PopId());
		else return 0.0f;
	}
	
	float GetObjectVertexWeight(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetVertexWeight(SubPath.PopId());
		else return 0.0f;
	}
	
	int GetObjectPathType(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetPathType();
		else return 0;
	}
	
	int GetObjectFillType(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetFillType();
		else return 0;
	}
	
	uint8_t GetObjectZoneIndex(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetZoneIndex();
		else return 0;
	}
	
	uint32_t GetObjectZoneFlags(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetZoneFlags();
		else return 0;
	}
	
	CAssetPath GetObjectAnimationPath(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetAnimationPath();
		else return CAssetPath::Null();
	}
	
	int64_t GetObjectAnimationOffset(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetAnimationOffset();
		else return 0;
	}
	
	int GetObjectZoneData1(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetZoneData1();
		else return 0;
	}
	
	int GetObjectZoneData2(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Object.size())
			return m_Object[SubPath.GetId()].GetZoneData2();
		else return 0;
	}
	
	bool GetVisibility() const { return m_Visibility; }
	
	void SetParentPath(const CAssetPath& Value) { m_ParentPath = Value; }
	
	void SetZoneTypePath(const CAssetPath& Value) { m_ZoneTypePath = Value; }
	
	void SetObjectArraySize(int Value) { m_Object.resize(Value); }
	
	void SetObject(const CSubPath& SubPath, const CAsset_MapZoneObjects::CObject& Value)
	{
		if(SubPath.GetId() < m_Object.size())
		{
			m_Object[SubPath.GetId()] = Value;
		}
	}
	
	void SetObjectPosition(const CSubPath& SubPath, vec2 Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetPosition(Value);
	}
	
	void SetObjectPositionX(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetPositionX(Value);
	}
	
	void SetObjectPositionY(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetPositionY(Value);
	}
	
	void SetObjectSize(const CSubPath& SubPath, vec2 Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetSize(Value);
	}
	
	void SetObjectSizeX(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetSizeX(Value);
	}
	
	void SetObjectSizeY(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetSizeY(Value);
	}
	
	void SetObjectAngle(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetAngle(Value);
	}
	
	void SetObjectVertexArraySize(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetVertexArraySize(Value);
	}
	
	void SetObjectVertex(const CSubPath& SubPath, const CAsset_MapZoneObjects::CVertex& Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetVertex(SubPath.PopId(), Value);
	}
	
	void SetObjectVertexPosition(const CSubPath& SubPath, vec2 Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetVertexPosition(SubPath.PopId(), Value);
	}
	
	void SetObjectVertexPositionX(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetVertexPositionX(SubPath.PopId(), Value);
	}
	
	void SetObjectVertexPositionY(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetVertexPositionY(SubPath.PopId(), Value);
	}
	
	void SetObjectVertexSmoothness(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetVertexSmoothness(SubPath.PopId(), Value);
	}
	
	void SetObjectVertexControlPoint0(const CSubPath& SubPath, vec2 Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetVertexControlPoint0(SubPath.PopId(), Value);
	}
	
	void SetObjectVertexControlPoint0X(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetVertexControlPoint0X(SubPath.PopId(), Value);
	}
	
	void SetObjectVertexControlPoint0Y(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetVertexControlPoint0Y(SubPath.PopId(), Value);
	}
	
	void SetObjectVertexControlPoint1(const CSubPath& SubPath, vec2 Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetVertexControlPoint1(SubPath.PopId(), Value);
	}
	
	void SetObjectVertexControlPoint1X(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetVertexControlPoint1X(SubPath.PopId(), Value);
	}
	
	void SetObjectVertexControlPoint1Y(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetVertexControlPoint1Y(SubPath.PopId(), Value);
	}
	
	void SetObjectVertexWeight(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetVertexWeight(SubPath.PopId(), Value);
	}
	
	void SetObjectPathType(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetPathType(Value);
	}
	
	void SetObjectFillType(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetFillType(Value);
	}
	
	void SetObjectZoneIndex(const CSubPath& SubPath, uint8_t Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetZoneIndex(Value);
	}
	
	void SetObjectZoneFlags(const CSubPath& SubPath, uint32_t Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetZoneFlags(Value);
	}
	
	void SetObjectAnimationPath(const CSubPath& SubPath, const CAssetPath& Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetAnimationPath(Value);
	}
	
	void SetObjectAnimationOffset(const CSubPath& SubPath, int64_t Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetAnimationOffset(Value);
	}
	
	void SetObjectZoneData1(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetZoneData1(Value);
	}
	
	void SetObjectZoneData2(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Object.size())
			m_Object[SubPath.GetId()].SetZoneData2(Value);
	}
	
	void SetVisibility(bool Value) { m_Visibility = Value; }
	
	int AddObject()
	{
		int Id = m_Object.size();
		m_Object.emplace_back();
		return Id;
	}
	
	int AddObjectVertex(const CSubPath& SubPath) { return m_Object[SubPath.GetId()].AddVertex(); }
	
	void AddAtObject(int Index) { m_Object.insert(m_Object.begin() + Index, CAsset_MapZoneObjects::CObject()); }
	
	void AddAtObjectVertex(const CSubPath& SubPath, int Index) { m_Object[SubPath.GetId()].AddAtVertex(Index); }
	
	void DeleteObject(const CSubPath& SubPath) { m_Object.erase(m_Object.begin() + SubPath.GetId()); }
	
	void DeleteObjectVertex(const CSubPath& SubPath) { m_Object[SubPath.GetId()].DeleteVertex(SubPath.PopId()); }
	
	void RelMoveObject(CSubPath& SubPath, int RelMove)
	{
		int NewId = relative_move(m_Object, SubPath.GetId(), RelMove);
		SubPath.SetId(NewId);
	}
	
	void RelMoveObjectVertex(CSubPath& SubPath, int RelMove)
	{
		CSubPath ChildSubPath = SubPath.PopId();
		m_Object[SubPath.GetId()].RelMoveVertex(ChildSubPath, RelMove);
		SubPath.SetId2(ChildSubPath.GetId());
	}
	
	bool IsValidObject(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_Object.size()); }
	
	bool IsValidObjectVertex(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_Object.size() && m_Object[SubPath.GetId()].IsValidVertex(SubPath.PopId())); }
	
	void AssetPathOperation(const CAssetPath::COperation& Operation)
	{
		Operation.Apply(m_ParentPath);
		Operation.Apply(m_ZoneTypePath);
		for(unsigned int i=0; i<m_Object.size(); i++)
		{
			m_Object[i].AssetPathOperation(Operation);
		}
	}
	
};

template<> int CAsset_MapZoneObjects::GetValue(int ValueType, const CSubPath& SubPath, int DefaultValue) const;
template<> bool CAsset_MapZoneObjects::SetValue(int ValueType, const CSubPath& SubPath, int Value);
template<> uint32_t CAsset_MapZoneObjects::GetValue(int ValueType, const CSubPath& SubPath, uint32_t DefaultValue) const;
template<> bool CAsset_MapZoneObjects::SetValue(int ValueType, const CSubPath& SubPath, uint32_t Value);
template<> int64_t CAsset_MapZoneObjects::GetValue(int ValueType, const CSubPath& SubPath, int64_t DefaultValue) const;
template<> bool CAsset_MapZoneObjects::SetValue(int ValueType, const CSubPath& SubPath, int64_t Value);
template<> bool CAsset_MapZoneObjects::GetValue(int ValueType, const CSubPath& SubPath, bool DefaultValue) const;
template<> bool CAsset_MapZoneObjects::SetValue(int ValueType, const CSubPath& SubPath, bool Value);
template<> float CAsset_MapZoneObjects::GetValue(int ValueType, const CSubPath& SubPath, float DefaultValue) const;
template<> bool CAsset_MapZoneObjects::SetValue(int ValueType, const CSubPath& SubPath, float Value);
template<> vec2 CAsset_MapZoneObjects::GetValue(int ValueType, const CSubPath& SubPath, vec2 DefaultValue) const;
template<> bool CAsset_MapZoneObjects::SetValue(int ValueType, const CSubPath& SubPath, vec2 Value);
template<> CAssetPath CAsset_MapZoneObjects::GetValue(int ValueType, const CSubPath& SubPath, CAssetPath DefaultValue) const;
template<> bool CAsset_MapZoneObjects::SetValue(int ValueType, const CSubPath& SubPath, CAssetPath Value);

#endif
