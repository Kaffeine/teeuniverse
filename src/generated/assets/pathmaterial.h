/*
 * Copyright (C) 2016 necropotame (necropotame@gmail.com)
 * 
 * This file is part of TeeUniverse.
 * 
 * TeeUniverse is free software: you can redistribute it and/or  modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * TeeUniverse is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with TeeUniverse.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * THIS FILE HAS BEEN GENERATED BY A SCRIPT.
 * DO NOT EDIT MANUALLY!
 *
 * Please use the script "scripts/assets/assets.py" to regenerate it.
 *
 * Why this file is generated by a script?
 * Because there is more than 10 files that follow the same format.
 * In addition, each time a new member is added, enums, getter, setters,
 * copy/transfert functions and storage structure must be updated.
 * It's too much to avoid mistakes.
 */

#ifndef __CLIENT_ASSETS_PATHMATERIAL__
#define __CLIENT_ASSETS_PATHMATERIAL__

#include <shared/assets/asset.h>
#include <shared/tl/algorithm.h>
#include <shared/math/vector.h>
#include <cassert>
#include <vector>
#include <shared/assets/assetpath.h>

class CAsset_PathMaterial : public CAsset
{
public:
	enum
	{
		SPRITEFLAG_VFLIP = 1,
		SPRITEFLAG_HFLIP = 2,
		SPRITEFLAG_ROTATION = 4,
	
		SPRITEFILLING_SCALING = 0,
		SPRITEFILLING_STRETCHING,
		SPRITEFILLING_SPACING,
	
		SPRITEALIGN_LINE = 0,
		SPRITEALIGN_OBJECT,
		SPRITEALIGN_STRETCHED,
	
		SPRITETILE_LINE = 0,
		SPRITETILE_CAP_START,
		SPRITETILE_CAP_END,
		SPRITETILE_CORNER_CONVEX,
		SPRITETILE_CORNER_CONCAVE,
	};
	
	static const int TypeId = 28;
	
	enum
	{
		TYPE_LABEL,
		TYPE_LAYER_SPRITE,
		TYPE_LAYER,
	};
	
	static inline CSubPath SubPath_Label(int Id0) { return CSubPath(TYPE_LABEL, Id0, 0, 0); }
	static inline CSubPath SubPath_LayerSprite(int Id0, int Id1) { return CSubPath(TYPE_LAYER_SPRITE, Id0, Id1, 0); }
	static inline CSubPath SubPath_Layer(int Id0) { return CSubPath(TYPE_LAYER, Id0, 0, 0); }
	
	enum
	{
		NAME = CAsset::NAME,
		LABEL_ARRAYSIZE,
		LABEL_PTR,
		LABEL_ARRAY,
		LABEL_COLOR,
		LABEL_ANGLESTART,
		LABEL_ANGLEEND,
		LABEL,
		LAYER_ARRAYSIZE,
		LAYER_PTR,
		LAYER_ARRAY,
		LAYER_SPRITE_ARRAYSIZE,
		LAYER_SPRITE_PTR,
		LAYER_SPRITE_ARRAY,
		LAYER_SPRITE,
		LAYER_SPRITE_PATH,
		LAYER_SPRITE_SIZE,
		LAYER_SPRITE_SIZE_X,
		LAYER_SPRITE_SIZE_Y,
		LAYER_SPRITE_COLOR,
		LAYER_SPRITE_FLAGS,
		LAYER_SPRITE_POSITION,
		LAYER_SPRITE_POSITION_X,
		LAYER_SPRITE_POSITION_Y,
		LAYER_SPRITE_ALIGNMENT,
		LAYER_SPRITE_FILLING,
		LAYER_SPRITE_TILETYPE,
		LAYER_SPRITE_TILELABEL0,
		LAYER_SPRITE_TILELABEL1,
		LAYER,
		TEXTUREPATH,
		TEXTURECOLOR,
		TEXTURESIZE_X,
		TEXTURESIZE_Y,
		TEXTURESIZE,
		TEXTUREANGLE,
		TEXTURESPACING,
		TEXTUREENABLED,
	};
	
	class CIteratorLabel
	{
	protected:
		int m_Index;
		bool m_Reverse;
	public:
		CIteratorLabel() : m_Index(0), m_Reverse(false) {}
		CIteratorLabel(int Index, bool Reverse) : m_Index(Index), m_Reverse(Reverse) {}
		CIteratorLabel& operator++() { if(m_Reverse) m_Index--; else m_Index++; return *this; }
		CSubPath operator*() { return SubPath_Label(m_Index); }
		bool operator==(const CIteratorLabel& Iter2) { return Iter2.m_Index == m_Index; }
		bool operator!=(const CIteratorLabel& Iter2) { return Iter2.m_Index != m_Index; }
	};
	
	CIteratorLabel BeginLabel() const { return CIteratorLabel(0, false); }
	CIteratorLabel EndLabel() const { return CIteratorLabel(m_Label.size(), false); }
	CIteratorLabel ReverseBeginLabel() const { return CIteratorLabel(m_Label.size()-1, true); }
	CIteratorLabel ReverseEndLabel() const { return CIteratorLabel(-1, true); }
	
	class CIteratorLayer
	{
	protected:
		int m_Index;
		bool m_Reverse;
	public:
		CIteratorLayer() : m_Index(0), m_Reverse(false) {}
		CIteratorLayer(int Index, bool Reverse) : m_Index(Index), m_Reverse(Reverse) {}
		CIteratorLayer& operator++() { if(m_Reverse) m_Index--; else m_Index++; return *this; }
		CSubPath operator*() { return SubPath_Layer(m_Index); }
		bool operator==(const CIteratorLayer& Iter2) { return Iter2.m_Index == m_Index; }
		bool operator!=(const CIteratorLayer& Iter2) { return Iter2.m_Index != m_Index; }
	};
	
	CIteratorLayer BeginLayer() const { return CIteratorLayer(0, false); }
	CIteratorLayer EndLayer() const { return CIteratorLayer(m_Layer.size(), false); }
	CIteratorLayer ReverseBeginLayer() const { return CIteratorLayer(m_Layer.size()-1, true); }
	CIteratorLayer ReverseEndLayer() const { return CIteratorLayer(-1, true); }
	
	class CLabel
	{
	public:
		class CTuaType_0_2_0
		{
		public:
			tua_uint32 m_Color;
			tua_float m_AngleStart;
			tua_float m_AngleEnd;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_PathMaterial::CLabel& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CLabel& SysType, CTuaType_0_2_0& TuaType);
		};
		
		class CTuaType_0_2_1
		{
		public:
			tua_uint32 m_Color;
			tua_float m_AngleStart;
			tua_float m_AngleEnd;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_PathMaterial::CLabel& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CLabel& SysType, CTuaType_0_2_1& TuaType);
		};
		
		class CTuaType_0_2_2
		{
		public:
			tua_uint32 m_Color;
			tua_float m_AngleStart;
			tua_float m_AngleEnd;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_PathMaterial::CLabel& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CLabel& SysType, CTuaType_0_2_2& TuaType);
		};
		
		class CTuaType_0_2_3
		{
		public:
			tua_uint32 m_Color;
			tua_float m_AngleStart;
			tua_float m_AngleEnd;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_PathMaterial::CLabel& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CLabel& SysType, CTuaType_0_2_3& TuaType);
		};
		
		class CTuaType_0_2_4
		{
		public:
			tua_uint32 m_Color;
			tua_float m_AngleStart;
			tua_float m_AngleEnd;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_PathMaterial::CLabel& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CLabel& SysType, CTuaType_0_2_4& TuaType);
		};
		
		class CTuaType_0_3_0
		{
		public:
			tua_uint32 m_Color;
			tua_float m_AngleStart;
			tua_float m_AngleEnd;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_PathMaterial::CLabel& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CLabel& SysType, CTuaType_0_3_0& TuaType);
		};
		
		class CTuaType_0_3_3
		{
		public:
			tua_uint32 m_Color;
			tua_float m_AngleStart;
			tua_float m_AngleEnd;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_3& TuaType, CAsset_PathMaterial::CLabel& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CLabel& SysType, CTuaType_0_3_3& TuaType);
		};
		
	
	private:
		vec4 m_Color{};
		float m_AngleStart{};
		float m_AngleEnd{};
	
	public:
		CLabel();
		vec4 GetColor() const { return m_Color; }
		
		float GetAngleStart() const { return m_AngleStart; }
		
		float GetAngleEnd() const { return m_AngleEnd; }
		
		void SetColor(vec4 Value) { m_Color = Value; }
		
		void SetAngleStart(float Value) { m_AngleStart = Value; }
		
		void SetAngleEnd(float Value) { m_AngleEnd = Value; }
		
		void AssetPathOperation(const CAssetPath::COperation& Operation)
		{
		}
		
	};
	class CSprite
	{
	public:
		class CTuaType_0_2_0
		{
		public:
			CAssetPath::CTuaType m_Path;
			CTuaVec2 m_Size;
			tua_uint32 m_Color;
			tua_int32 m_Flags;
			CTuaVec2 m_Position;
			tua_int32 m_Alignment;
			tua_int32 m_Filling;
			tua_int32 m_TileType;
			tua_int32 m_TileLabel0;
			tua_int32 m_TileLabel1;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_PathMaterial::CSprite& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CSprite& SysType, CTuaType_0_2_0& TuaType);
		};
		
		class CTuaType_0_2_1
		{
		public:
			CAssetPath::CTuaType m_Path;
			CTuaVec2 m_Size;
			tua_uint32 m_Color;
			tua_int32 m_Flags;
			CTuaVec2 m_Position;
			tua_int32 m_Alignment;
			tua_int32 m_Filling;
			tua_int32 m_TileType;
			tua_int32 m_TileLabel0;
			tua_int32 m_TileLabel1;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_PathMaterial::CSprite& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CSprite& SysType, CTuaType_0_2_1& TuaType);
		};
		
		class CTuaType_0_2_2
		{
		public:
			CAssetPath::CTuaType m_Path;
			CTuaVec2 m_Size;
			tua_uint32 m_Color;
			tua_int32 m_Flags;
			CTuaVec2 m_Position;
			tua_int32 m_Alignment;
			tua_int32 m_Filling;
			tua_int32 m_TileType;
			tua_int32 m_TileLabel0;
			tua_int32 m_TileLabel1;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_PathMaterial::CSprite& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CSprite& SysType, CTuaType_0_2_2& TuaType);
		};
		
		class CTuaType_0_2_3
		{
		public:
			CAssetPath::CTuaType m_Path;
			CTuaVec2 m_Size;
			tua_uint32 m_Color;
			tua_int32 m_Flags;
			CTuaVec2 m_Position;
			tua_int32 m_Alignment;
			tua_int32 m_Filling;
			tua_int32 m_TileType;
			tua_int32 m_TileLabel0;
			tua_int32 m_TileLabel1;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_PathMaterial::CSprite& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CSprite& SysType, CTuaType_0_2_3& TuaType);
		};
		
		class CTuaType_0_2_4
		{
		public:
			CAssetPath::CTuaType m_Path;
			CTuaVec2 m_Size;
			tua_uint32 m_Color;
			tua_int32 m_Flags;
			CTuaVec2 m_Position;
			tua_int32 m_Alignment;
			tua_int32 m_Filling;
			tua_int32 m_TileType;
			tua_int32 m_TileLabel0;
			tua_int32 m_TileLabel1;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_PathMaterial::CSprite& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CSprite& SysType, CTuaType_0_2_4& TuaType);
		};
		
		class CTuaType_0_3_0
		{
		public:
			CAssetPath::CTuaType m_Path;
			CTuaVec2 m_Size;
			tua_uint32 m_Color;
			tua_int32 m_Flags;
			CTuaVec2 m_Position;
			tua_int32 m_Alignment;
			tua_int32 m_Filling;
			tua_int32 m_TileType;
			tua_int32 m_TileLabel0;
			tua_int32 m_TileLabel1;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_PathMaterial::CSprite& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CSprite& SysType, CTuaType_0_3_0& TuaType);
		};
		
		class CTuaType_0_3_3
		{
		public:
			CAssetPath::CTuaType m_Path;
			CTuaVec2 m_Size;
			tua_uint32 m_Color;
			tua_int32 m_Flags;
			CTuaVec2 m_Position;
			tua_int32 m_Alignment;
			tua_int32 m_Filling;
			tua_int32 m_TileType;
			tua_int32 m_TileLabel0;
			tua_int32 m_TileLabel1;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_3& TuaType, CAsset_PathMaterial::CSprite& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CSprite& SysType, CTuaType_0_3_3& TuaType);
		};
		
	
	private:
		CAssetPath m_Path{};
		vec2 m_Size{};
		vec4 m_Color{};
		int m_Flags{};
		vec2 m_Position{};
		int m_Alignment{};
		int m_Filling{};
		int m_TileType{};
		int m_TileLabel0{};
		int m_TileLabel1{};
	
	public:
		CSprite();
		CAssetPath GetPath() const { return m_Path; }
		
		vec2 GetSize() const { return m_Size; }
		
		float GetSizeX() const { return m_Size.x; }
		
		float GetSizeY() const { return m_Size.y; }
		
		vec4 GetColor() const { return m_Color; }
		
		int GetFlags() const { return m_Flags; }
		
		vec2 GetPosition() const { return m_Position; }
		
		float GetPositionX() const { return m_Position.x; }
		
		float GetPositionY() const { return m_Position.y; }
		
		int GetAlignment() const { return m_Alignment; }
		
		int GetFilling() const { return m_Filling; }
		
		int GetTileType() const { return m_TileType; }
		
		int GetTileLabel0() const { return m_TileLabel0; }
		
		int GetTileLabel1() const { return m_TileLabel1; }
		
		void SetPath(const CAssetPath& Value) { m_Path = Value; }
		
		void SetSize(vec2 Value) { m_Size = Value; }
		
		void SetSizeX(float Value) { m_Size.x = Value; }
		
		void SetSizeY(float Value) { m_Size.y = Value; }
		
		void SetColor(vec4 Value) { m_Color = Value; }
		
		void SetFlags(int Value) { m_Flags = Value; }
		
		void SetPosition(vec2 Value) { m_Position = Value; }
		
		void SetPositionX(float Value) { m_Position.x = Value; }
		
		void SetPositionY(float Value) { m_Position.y = Value; }
		
		void SetAlignment(int Value) { m_Alignment = Value; }
		
		void SetFilling(int Value) { m_Filling = Value; }
		
		void SetTileType(int Value) { m_TileType = Value; }
		
		void SetTileLabel0(int Value) { m_TileLabel0 = Value; }
		
		void SetTileLabel1(int Value) { m_TileLabel1 = Value; }
		
		void AssetPathOperation(const CAssetPath::COperation& Operation)
		{
			Operation.Apply(m_Path);
		}
		
	};
	class CLayer
	{
	public:
		class CTuaType_0_2_0
		{
		public:
			CTuaArray m_Sprite;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_PathMaterial::CLayer& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CLayer& SysType, CTuaType_0_2_0& TuaType);
		};
		
		class CTuaType_0_2_1
		{
		public:
			CTuaArray m_Sprite;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_PathMaterial::CLayer& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CLayer& SysType, CTuaType_0_2_1& TuaType);
		};
		
		class CTuaType_0_2_2
		{
		public:
			CTuaArray m_Sprite;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_PathMaterial::CLayer& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CLayer& SysType, CTuaType_0_2_2& TuaType);
		};
		
		class CTuaType_0_2_3
		{
		public:
			CTuaArray m_Sprite;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_PathMaterial::CLayer& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CLayer& SysType, CTuaType_0_2_3& TuaType);
		};
		
		class CTuaType_0_2_4
		{
		public:
			CTuaArray m_Sprite;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_PathMaterial::CLayer& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CLayer& SysType, CTuaType_0_2_4& TuaType);
		};
		
		class CTuaType_0_3_0
		{
		public:
			CTuaArray m_Sprite;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_PathMaterial::CLayer& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CLayer& SysType, CTuaType_0_3_0& TuaType);
		};
		
		class CTuaType_0_3_3
		{
		public:
			CTuaArray m_Sprite;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_3& TuaType, CAsset_PathMaterial::CLayer& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial::CLayer& SysType, CTuaType_0_3_3& TuaType);
		};
		
	
	private:
		std::vector<CSprite> m_Sprite{};
	
	public:
		int GetSpriteArraySize() const { return m_Sprite.size(); }
		
		const CAsset_PathMaterial::CSprite* GetSpritePtr() const { return &(m_Sprite.front()); }
		
		const std::vector<CSprite>& GetSpriteArray() const { return m_Sprite; }
		std::vector<CSprite>& GetSpriteArray() { return m_Sprite; }
		
		const CAsset_PathMaterial::CSprite& GetSprite(const CSubPath& SubPath) const
		{
			assert(SubPath.GetId() < m_Sprite.size());
			{
				return m_Sprite[SubPath.GetId()];
			}
		}
		
		CAssetPath GetSpritePath(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Sprite.size())
				return m_Sprite[SubPath.GetId()].GetPath();
			else return CAssetPath::Null();
		}
		
		vec2 GetSpriteSize(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Sprite.size())
				return m_Sprite[SubPath.GetId()].GetSize();
			else return 0.0f;
		}
		
		float GetSpriteSizeX(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Sprite.size())
				return m_Sprite[SubPath.GetId()].GetSizeX();
			else return 0.0f;
		}
		
		float GetSpriteSizeY(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Sprite.size())
				return m_Sprite[SubPath.GetId()].GetSizeY();
			else return 0.0f;
		}
		
		vec4 GetSpriteColor(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Sprite.size())
				return m_Sprite[SubPath.GetId()].GetColor();
			else return 1.0f;
		}
		
		int GetSpriteFlags(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Sprite.size())
				return m_Sprite[SubPath.GetId()].GetFlags();
			else return 0;
		}
		
		vec2 GetSpritePosition(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Sprite.size())
				return m_Sprite[SubPath.GetId()].GetPosition();
			else return 0.0f;
		}
		
		float GetSpritePositionX(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Sprite.size())
				return m_Sprite[SubPath.GetId()].GetPositionX();
			else return 0.0f;
		}
		
		float GetSpritePositionY(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Sprite.size())
				return m_Sprite[SubPath.GetId()].GetPositionY();
			else return 0.0f;
		}
		
		int GetSpriteAlignment(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Sprite.size())
				return m_Sprite[SubPath.GetId()].GetAlignment();
			else return 0;
		}
		
		int GetSpriteFilling(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Sprite.size())
				return m_Sprite[SubPath.GetId()].GetFilling();
			else return 0;
		}
		
		int GetSpriteTileType(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Sprite.size())
				return m_Sprite[SubPath.GetId()].GetTileType();
			else return 0;
		}
		
		int GetSpriteTileLabel0(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Sprite.size())
				return m_Sprite[SubPath.GetId()].GetTileLabel0();
			else return 0;
		}
		
		int GetSpriteTileLabel1(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Sprite.size())
				return m_Sprite[SubPath.GetId()].GetTileLabel1();
			else return 0;
		}
		
		void SetSpriteArraySize(int Value) { m_Sprite.resize(Value); }
		
		void SetSprite(const CSubPath& SubPath, const CAsset_PathMaterial::CSprite& Value)
		{
			if(SubPath.GetId() < m_Sprite.size())
			{
				m_Sprite[SubPath.GetId()] = Value;
			}
		}
		
		void SetSpritePath(const CSubPath& SubPath, const CAssetPath& Value)
		{
			if(SubPath.GetId() < m_Sprite.size())
				m_Sprite[SubPath.GetId()].SetPath(Value);
		}
		
		void SetSpriteSize(const CSubPath& SubPath, vec2 Value)
		{
			if(SubPath.GetId() < m_Sprite.size())
				m_Sprite[SubPath.GetId()].SetSize(Value);
		}
		
		void SetSpriteSizeX(const CSubPath& SubPath, float Value)
		{
			if(SubPath.GetId() < m_Sprite.size())
				m_Sprite[SubPath.GetId()].SetSizeX(Value);
		}
		
		void SetSpriteSizeY(const CSubPath& SubPath, float Value)
		{
			if(SubPath.GetId() < m_Sprite.size())
				m_Sprite[SubPath.GetId()].SetSizeY(Value);
		}
		
		void SetSpriteColor(const CSubPath& SubPath, vec4 Value)
		{
			if(SubPath.GetId() < m_Sprite.size())
				m_Sprite[SubPath.GetId()].SetColor(Value);
		}
		
		void SetSpriteFlags(const CSubPath& SubPath, int Value)
		{
			if(SubPath.GetId() < m_Sprite.size())
				m_Sprite[SubPath.GetId()].SetFlags(Value);
		}
		
		void SetSpritePosition(const CSubPath& SubPath, vec2 Value)
		{
			if(SubPath.GetId() < m_Sprite.size())
				m_Sprite[SubPath.GetId()].SetPosition(Value);
		}
		
		void SetSpritePositionX(const CSubPath& SubPath, float Value)
		{
			if(SubPath.GetId() < m_Sprite.size())
				m_Sprite[SubPath.GetId()].SetPositionX(Value);
		}
		
		void SetSpritePositionY(const CSubPath& SubPath, float Value)
		{
			if(SubPath.GetId() < m_Sprite.size())
				m_Sprite[SubPath.GetId()].SetPositionY(Value);
		}
		
		void SetSpriteAlignment(const CSubPath& SubPath, int Value)
		{
			if(SubPath.GetId() < m_Sprite.size())
				m_Sprite[SubPath.GetId()].SetAlignment(Value);
		}
		
		void SetSpriteFilling(const CSubPath& SubPath, int Value)
		{
			if(SubPath.GetId() < m_Sprite.size())
				m_Sprite[SubPath.GetId()].SetFilling(Value);
		}
		
		void SetSpriteTileType(const CSubPath& SubPath, int Value)
		{
			if(SubPath.GetId() < m_Sprite.size())
				m_Sprite[SubPath.GetId()].SetTileType(Value);
		}
		
		void SetSpriteTileLabel0(const CSubPath& SubPath, int Value)
		{
			if(SubPath.GetId() < m_Sprite.size())
				m_Sprite[SubPath.GetId()].SetTileLabel0(Value);
		}
		
		void SetSpriteTileLabel1(const CSubPath& SubPath, int Value)
		{
			if(SubPath.GetId() < m_Sprite.size())
				m_Sprite[SubPath.GetId()].SetTileLabel1(Value);
		}
		
		int AddSprite()
		{
			int Id = m_Sprite.size();
			m_Sprite.emplace_back();
			return Id;
		}
		
		void AddAtSprite(int Index) { m_Sprite.insert(m_Sprite.begin() + Index, CAsset_PathMaterial::CSprite()); }
		
		void DeleteSprite(const CSubPath& SubPath) { m_Sprite.erase(m_Sprite.begin() + SubPath.GetId()); }
		
		void RelMoveSprite(CSubPath& SubPath, int RelMove)
		{
			int NewId = relative_move(m_Sprite, SubPath.GetId(), RelMove);
			SubPath.SetId(NewId);
		}
		
		bool IsValidSprite(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_Sprite.size()); }
		
		void AssetPathOperation(const CAssetPath::COperation& Operation)
		{
			for(unsigned int i=0; i<m_Sprite.size(); i++)
			{
				m_Sprite[i].AssetPathOperation(Operation);
			}
		}
		
	};
	class CTuaType_0_2_0 : public CAsset::CTuaType_0_2_0
	{
	public:
		CTuaArray m_Label;
		CTuaArray m_Layer;
		CAssetPath::CTuaType m_TexturePath;
		tua_uint32 m_TextureColor;
		CTuaVec2 m_TextureSize;
		tua_float m_TextureAngle;
		tua_float m_TextureSpacing;
		tua_uint8 m_TextureEnabled;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_PathMaterial& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial& SysType, CTuaType_0_2_0& TuaType);
	};
	
	class CTuaType_0_2_1 : public CAsset::CTuaType_0_2_1
	{
	public:
		CTuaArray m_Label;
		CTuaArray m_Layer;
		CAssetPath::CTuaType m_TexturePath;
		tua_uint32 m_TextureColor;
		CTuaVec2 m_TextureSize;
		tua_float m_TextureAngle;
		tua_float m_TextureSpacing;
		tua_uint8 m_TextureEnabled;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_PathMaterial& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial& SysType, CTuaType_0_2_1& TuaType);
	};
	
	class CTuaType_0_2_2 : public CAsset::CTuaType_0_2_2
	{
	public:
		CTuaArray m_Label;
		CTuaArray m_Layer;
		CAssetPath::CTuaType m_TexturePath;
		tua_uint32 m_TextureColor;
		CTuaVec2 m_TextureSize;
		tua_float m_TextureAngle;
		tua_float m_TextureSpacing;
		tua_uint8 m_TextureEnabled;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_PathMaterial& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial& SysType, CTuaType_0_2_2& TuaType);
	};
	
	class CTuaType_0_2_3 : public CAsset::CTuaType_0_2_3
	{
	public:
		CTuaArray m_Label;
		CTuaArray m_Layer;
		CAssetPath::CTuaType m_TexturePath;
		tua_uint32 m_TextureColor;
		CTuaVec2 m_TextureSize;
		tua_float m_TextureAngle;
		tua_float m_TextureSpacing;
		tua_uint8 m_TextureEnabled;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_PathMaterial& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial& SysType, CTuaType_0_2_3& TuaType);
	};
	
	class CTuaType_0_2_4 : public CAsset::CTuaType_0_2_4
	{
	public:
		CTuaArray m_Label;
		CTuaArray m_Layer;
		CAssetPath::CTuaType m_TexturePath;
		tua_uint32 m_TextureColor;
		CTuaVec2 m_TextureSize;
		tua_float m_TextureAngle;
		tua_float m_TextureSpacing;
		tua_uint8 m_TextureEnabled;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_PathMaterial& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial& SysType, CTuaType_0_2_4& TuaType);
	};
	
	class CTuaType_0_3_0 : public CAsset::CTuaType_0_3_0
	{
	public:
		CTuaArray m_Label;
		CTuaArray m_Layer;
		CAssetPath::CTuaType m_TexturePath;
		tua_uint32 m_TextureColor;
		CTuaVec2 m_TextureSize;
		tua_float m_TextureAngle;
		tua_float m_TextureSpacing;
		tua_uint8 m_TextureEnabled;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_PathMaterial& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial& SysType, CTuaType_0_3_0& TuaType);
	};
	
	class CTuaType_0_3_3 : public CAsset::CTuaType_0_3_3
	{
	public:
		CTuaArray m_Label;
		CTuaArray m_Layer;
		CAssetPath::CTuaType m_TexturePath;
		tua_uint32 m_TextureColor;
		CTuaVec2 m_TextureSize;
		tua_float m_TextureAngle;
		tua_float m_TextureSpacing;
		tua_uint8 m_TextureEnabled;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_3& TuaType, CAsset_PathMaterial& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_PathMaterial& SysType, CTuaType_0_3_3& TuaType);
	};
	

private:
	std::vector<CAsset_PathMaterial::CLabel> m_Label{};
	std::vector<CAsset_PathMaterial::CLayer> m_Layer{};
	CAssetPath m_TexturePath{};
	vec4 m_TextureColor{};
	vec2 m_TextureSize{};
	float m_TextureAngle{};
	float m_TextureSpacing{};
	bool m_TextureEnabled{};

public:
	virtual ~CAsset_PathMaterial() {}
	
	template<typename T>
	T GetValue(int ValueType, const CSubPath& SubPath, T DefaultValue) const
	{
		return CAsset::GetValue<T>(ValueType, SubPath, DefaultValue);
	}
	
	template<typename T>
	bool SetValue(int ValueType, const CSubPath& SubPath, T Value)
	{
		return CAsset::SetValue<T>(ValueType, SubPath, Value);
	}
	
	int AddSubItem(int Type, const CSubPath& SubPath);
	
	int AddSubItemAt(int Type, const CSubPath& SubPath, int Index);
	
	void DeleteSubItem(const CSubPath& SubPath);
	
	void RelMoveSubItem(CSubPath& SubPath, int RelMove);
	
	CAsset_PathMaterial();
	int GetLabelArraySize() const { return m_Label.size(); }
	
	const CAsset_PathMaterial::CLabel* GetLabelPtr() const { return &(m_Label.front()); }
	
	const std::vector<CAsset_PathMaterial::CLabel>& GetLabelArray() const { return m_Label; }
	std::vector<CAsset_PathMaterial::CLabel>& GetLabelArray() { return m_Label; }
	
	const CAsset_PathMaterial::CLabel& GetLabel(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_Label.size());
		{
			return m_Label[SubPath.GetId()];
		}
	}
	
	vec4 GetLabelColor(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Label.size())
			return m_Label[SubPath.GetId()].GetColor();
		else return 1.0f;
	}
	
	float GetLabelAngleStart(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Label.size())
			return m_Label[SubPath.GetId()].GetAngleStart();
		else return 0.0f;
	}
	
	float GetLabelAngleEnd(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Label.size())
			return m_Label[SubPath.GetId()].GetAngleEnd();
		else return 0.0f;
	}
	
	int GetLayerArraySize() const { return m_Layer.size(); }
	
	const CAsset_PathMaterial::CLayer* GetLayerPtr() const { return &(m_Layer.front()); }
	
	const std::vector<CAsset_PathMaterial::CLayer>& GetLayerArray() const { return m_Layer; }
	std::vector<CAsset_PathMaterial::CLayer>& GetLayerArray() { return m_Layer; }
	
	const CAsset_PathMaterial::CLayer& GetLayer(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_Layer.size());
		{
			return m_Layer[SubPath.GetId()];
		}
	}
	
	int GetLayerSpriteArraySize(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Layer.size())
			return m_Layer[SubPath.GetId()].GetSpriteArraySize();
		else return 0;
	}
	
	const CAsset_PathMaterial::CSprite* GetLayerSpritePtr(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Layer.size())
			return m_Layer[SubPath.GetId()].GetSpritePtr();
		else return NULL;
	}
	
	const std::vector<CSprite>& GetLayerSpriteArray(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_Layer.size());
		return m_Layer[SubPath.GetId()].GetSpriteArray();
	}
	std::vector<CSprite>& GetLayerSpriteArray(const CSubPath& SubPath)
	{
		assert(SubPath.GetId() < m_Layer.size());
		return m_Layer[SubPath.GetId()].GetSpriteArray();
	}
	
	const CAsset_PathMaterial::CSprite& GetLayerSprite(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_Layer.size());
		return m_Layer[SubPath.GetId()].GetSprite(SubPath.PopId());
	}
	
	CAssetPath GetLayerSpritePath(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Layer.size())
			return m_Layer[SubPath.GetId()].GetSpritePath(SubPath.PopId());
		else return CAssetPath::Null();
	}
	
	vec2 GetLayerSpriteSize(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Layer.size())
			return m_Layer[SubPath.GetId()].GetSpriteSize(SubPath.PopId());
		else return 0.0f;
	}
	
	float GetLayerSpriteSizeX(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Layer.size())
			return m_Layer[SubPath.GetId()].GetSpriteSizeX(SubPath.PopId());
		else return 0.0f;
	}
	
	float GetLayerSpriteSizeY(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Layer.size())
			return m_Layer[SubPath.GetId()].GetSpriteSizeY(SubPath.PopId());
		else return 0.0f;
	}
	
	vec4 GetLayerSpriteColor(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Layer.size())
			return m_Layer[SubPath.GetId()].GetSpriteColor(SubPath.PopId());
		else return 1.0f;
	}
	
	int GetLayerSpriteFlags(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Layer.size())
			return m_Layer[SubPath.GetId()].GetSpriteFlags(SubPath.PopId());
		else return 0;
	}
	
	vec2 GetLayerSpritePosition(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Layer.size())
			return m_Layer[SubPath.GetId()].GetSpritePosition(SubPath.PopId());
		else return 0.0f;
	}
	
	float GetLayerSpritePositionX(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Layer.size())
			return m_Layer[SubPath.GetId()].GetSpritePositionX(SubPath.PopId());
		else return 0.0f;
	}
	
	float GetLayerSpritePositionY(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Layer.size())
			return m_Layer[SubPath.GetId()].GetSpritePositionY(SubPath.PopId());
		else return 0.0f;
	}
	
	int GetLayerSpriteAlignment(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Layer.size())
			return m_Layer[SubPath.GetId()].GetSpriteAlignment(SubPath.PopId());
		else return 0;
	}
	
	int GetLayerSpriteFilling(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Layer.size())
			return m_Layer[SubPath.GetId()].GetSpriteFilling(SubPath.PopId());
		else return 0;
	}
	
	int GetLayerSpriteTileType(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Layer.size())
			return m_Layer[SubPath.GetId()].GetSpriteTileType(SubPath.PopId());
		else return 0;
	}
	
	int GetLayerSpriteTileLabel0(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Layer.size())
			return m_Layer[SubPath.GetId()].GetSpriteTileLabel0(SubPath.PopId());
		else return 0;
	}
	
	int GetLayerSpriteTileLabel1(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Layer.size())
			return m_Layer[SubPath.GetId()].GetSpriteTileLabel1(SubPath.PopId());
		else return 0;
	}
	
	CAssetPath GetTexturePath() const { return m_TexturePath; }
	
	vec4 GetTextureColor() const { return m_TextureColor; }
	
	vec2 GetTextureSize() const { return m_TextureSize; }
	
	float GetTextureSizeX() const { return m_TextureSize.x; }
	
	float GetTextureSizeY() const { return m_TextureSize.y; }
	
	float GetTextureAngle() const { return m_TextureAngle; }
	
	float GetTextureSpacing() const { return m_TextureSpacing; }
	
	bool GetTextureEnabled() const { return m_TextureEnabled; }
	
	void SetLabelArraySize(int Value) { m_Label.resize(Value); }
	
	void SetLabel(const CSubPath& SubPath, const CAsset_PathMaterial::CLabel& Value)
	{
		if(SubPath.GetId() < m_Label.size())
		{
			m_Label[SubPath.GetId()] = Value;
		}
	}
	
	void SetLabelColor(const CSubPath& SubPath, vec4 Value)
	{
		if(SubPath.GetId() < m_Label.size())
			m_Label[SubPath.GetId()].SetColor(Value);
	}
	
	void SetLabelAngleStart(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_Label.size())
			m_Label[SubPath.GetId()].SetAngleStart(Value);
	}
	
	void SetLabelAngleEnd(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_Label.size())
			m_Label[SubPath.GetId()].SetAngleEnd(Value);
	}
	
	void SetLayerArraySize(int Value) { m_Layer.resize(Value); }
	
	void SetLayer(const CSubPath& SubPath, const CAsset_PathMaterial::CLayer& Value)
	{
		if(SubPath.GetId() < m_Layer.size())
		{
			m_Layer[SubPath.GetId()] = Value;
		}
	}
	
	void SetLayerSpriteArraySize(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Layer.size())
			m_Layer[SubPath.GetId()].SetSpriteArraySize(Value);
	}
	
	void SetLayerSprite(const CSubPath& SubPath, const CAsset_PathMaterial::CSprite& Value)
	{
		if(SubPath.GetId() < m_Layer.size())
			m_Layer[SubPath.GetId()].SetSprite(SubPath.PopId(), Value);
	}
	
	void SetLayerSpritePath(const CSubPath& SubPath, const CAssetPath& Value)
	{
		if(SubPath.GetId() < m_Layer.size())
			m_Layer[SubPath.GetId()].SetSpritePath(SubPath.PopId(), Value);
	}
	
	void SetLayerSpriteSize(const CSubPath& SubPath, vec2 Value)
	{
		if(SubPath.GetId() < m_Layer.size())
			m_Layer[SubPath.GetId()].SetSpriteSize(SubPath.PopId(), Value);
	}
	
	void SetLayerSpriteSizeX(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_Layer.size())
			m_Layer[SubPath.GetId()].SetSpriteSizeX(SubPath.PopId(), Value);
	}
	
	void SetLayerSpriteSizeY(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_Layer.size())
			m_Layer[SubPath.GetId()].SetSpriteSizeY(SubPath.PopId(), Value);
	}
	
	void SetLayerSpriteColor(const CSubPath& SubPath, vec4 Value)
	{
		if(SubPath.GetId() < m_Layer.size())
			m_Layer[SubPath.GetId()].SetSpriteColor(SubPath.PopId(), Value);
	}
	
	void SetLayerSpriteFlags(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Layer.size())
			m_Layer[SubPath.GetId()].SetSpriteFlags(SubPath.PopId(), Value);
	}
	
	void SetLayerSpritePosition(const CSubPath& SubPath, vec2 Value)
	{
		if(SubPath.GetId() < m_Layer.size())
			m_Layer[SubPath.GetId()].SetSpritePosition(SubPath.PopId(), Value);
	}
	
	void SetLayerSpritePositionX(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_Layer.size())
			m_Layer[SubPath.GetId()].SetSpritePositionX(SubPath.PopId(), Value);
	}
	
	void SetLayerSpritePositionY(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_Layer.size())
			m_Layer[SubPath.GetId()].SetSpritePositionY(SubPath.PopId(), Value);
	}
	
	void SetLayerSpriteAlignment(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Layer.size())
			m_Layer[SubPath.GetId()].SetSpriteAlignment(SubPath.PopId(), Value);
	}
	
	void SetLayerSpriteFilling(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Layer.size())
			m_Layer[SubPath.GetId()].SetSpriteFilling(SubPath.PopId(), Value);
	}
	
	void SetLayerSpriteTileType(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Layer.size())
			m_Layer[SubPath.GetId()].SetSpriteTileType(SubPath.PopId(), Value);
	}
	
	void SetLayerSpriteTileLabel0(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Layer.size())
			m_Layer[SubPath.GetId()].SetSpriteTileLabel0(SubPath.PopId(), Value);
	}
	
	void SetLayerSpriteTileLabel1(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Layer.size())
			m_Layer[SubPath.GetId()].SetSpriteTileLabel1(SubPath.PopId(), Value);
	}
	
	void SetTexturePath(const CAssetPath& Value) { m_TexturePath = Value; }
	
	void SetTextureColor(vec4 Value) { m_TextureColor = Value; }
	
	void SetTextureSize(vec2 Value) { m_TextureSize = Value; }
	
	void SetTextureSizeX(float Value) { m_TextureSize.x = Value; }
	
	void SetTextureSizeY(float Value) { m_TextureSize.y = Value; }
	
	void SetTextureAngle(float Value) { m_TextureAngle = Value; }
	
	void SetTextureSpacing(float Value) { m_TextureSpacing = Value; }
	
	void SetTextureEnabled(bool Value) { m_TextureEnabled = Value; }
	
	int AddLabel()
	{
		int Id = m_Label.size();
		m_Label.emplace_back();
		return Id;
	}
	
	int AddLayer()
	{
		int Id = m_Layer.size();
		m_Layer.emplace_back();
		return Id;
	}
	
	int AddLayerSprite(const CSubPath& SubPath) { return m_Layer[SubPath.GetId()].AddSprite(); }
	
	void AddAtLabel(int Index) { m_Label.insert(m_Label.begin() + Index, CAsset_PathMaterial::CLabel()); }
	
	void AddAtLayer(int Index) { m_Layer.insert(m_Layer.begin() + Index, CAsset_PathMaterial::CLayer()); }
	
	void AddAtLayerSprite(const CSubPath& SubPath, int Index) { m_Layer[SubPath.GetId()].AddAtSprite(Index); }
	
	void DeleteLabel(const CSubPath& SubPath) { m_Label.erase(m_Label.begin() + SubPath.GetId()); }
	
	void DeleteLayer(const CSubPath& SubPath) { m_Layer.erase(m_Layer.begin() + SubPath.GetId()); }
	
	void DeleteLayerSprite(const CSubPath& SubPath) { m_Layer[SubPath.GetId()].DeleteSprite(SubPath.PopId()); }
	
	void RelMoveLabel(CSubPath& SubPath, int RelMove)
	{
		int NewId = relative_move(m_Label, SubPath.GetId(), RelMove);
		SubPath.SetId(NewId);
	}
	
	void RelMoveLayer(CSubPath& SubPath, int RelMove)
	{
		int NewId = relative_move(m_Layer, SubPath.GetId(), RelMove);
		SubPath.SetId(NewId);
	}
	
	void RelMoveLayerSprite(CSubPath& SubPath, int RelMove)
	{
		CSubPath ChildSubPath = SubPath.PopId();
		m_Layer[SubPath.GetId()].RelMoveSprite(ChildSubPath, RelMove);
		SubPath.SetId2(ChildSubPath.GetId());
	}
	
	bool IsValidLabel(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_Label.size()); }
	
	bool IsValidLayer(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_Layer.size()); }
	
	bool IsValidLayerSprite(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_Layer.size() && m_Layer[SubPath.GetId()].IsValidSprite(SubPath.PopId())); }
	
	void AssetPathOperation(const CAssetPath::COperation& Operation)
	{
		for(unsigned int i=0; i<m_Label.size(); i++)
		{
			m_Label[i].AssetPathOperation(Operation);
		}
		for(unsigned int i=0; i<m_Layer.size(); i++)
		{
			m_Layer[i].AssetPathOperation(Operation);
		}
		Operation.Apply(m_TexturePath);
	}
	
};

template<> int CAsset_PathMaterial::GetValue(int ValueType, const CSubPath& SubPath, int DefaultValue) const;
template<> bool CAsset_PathMaterial::SetValue(int ValueType, const CSubPath& SubPath, int Value);
template<> bool CAsset_PathMaterial::GetValue(int ValueType, const CSubPath& SubPath, bool DefaultValue) const;
template<> bool CAsset_PathMaterial::SetValue(int ValueType, const CSubPath& SubPath, bool Value);
template<> float CAsset_PathMaterial::GetValue(int ValueType, const CSubPath& SubPath, float DefaultValue) const;
template<> bool CAsset_PathMaterial::SetValue(int ValueType, const CSubPath& SubPath, float Value);
template<> vec2 CAsset_PathMaterial::GetValue(int ValueType, const CSubPath& SubPath, vec2 DefaultValue) const;
template<> bool CAsset_PathMaterial::SetValue(int ValueType, const CSubPath& SubPath, vec2 Value);
template<> vec4 CAsset_PathMaterial::GetValue(int ValueType, const CSubPath& SubPath, vec4 DefaultValue) const;
template<> bool CAsset_PathMaterial::SetValue(int ValueType, const CSubPath& SubPath, vec4 Value);
template<> CAssetPath CAsset_PathMaterial::GetValue(int ValueType, const CSubPath& SubPath, CAssetPath DefaultValue) const;
template<> bool CAsset_PathMaterial::SetValue(int ValueType, const CSubPath& SubPath, CAssetPath Value);

#endif
